// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestauranteSaborDoBrasil.Infra.Data.Context;

namespace RestauranteSaborDoBrasil.Infra.Data.Migrations
{
    [DbContext(typeof(WritingDbContext))]
    [Migration("20210929144327_AddControleEstoque")]
    partial class AddControleEstoque
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Cardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DiaSemana")
                        .IsUnique();

                    b.ToTable("Cardapio");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Comanda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Comanda");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ComandaMesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComandaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MesaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ComandaId")
                        .IsUnique();

                    b.HasIndex("MesaId");

                    b.ToTable("ComandaMesa");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("InscricaoEstadual")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("InscricaoMunicipal")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NomeFantassia")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.HistoricoMesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFechamento")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MesaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuantidadeOcupantes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MesaId");

                    b.ToTable("HistoricoMesa");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Ingrediente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<float>("EstoqueMaximo")
                        .HasColumnType("real");

                    b.Property<float>("EstoqueMinimo")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Ingrediente");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemComanda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComandaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PratoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ComandaId");

                    b.HasIndex("PratoId");

                    b.ToTable("ItemComanda");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemNotaEntrada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotaEntradaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantidade")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("NotaEntradaId");

                    b.ToTable("ItemNotaEntrada");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Mesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<int>("QuantidadeMax")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mesa");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f32249b-0819-4272-8704-594511e24596"),
                            Numero = "01",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("19e3e924-771e-4a85-852c-b8d0eb787284"),
                            Numero = "02",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("a7a8f253-1fd0-441c-97a5-f9ad6aafd7ac"),
                            Numero = "03",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("2cdab575-5995-4bb8-a8ff-1fbf28c8247b"),
                            Numero = "04",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("4daa1d7b-2d3b-48e9-80fe-51ef7fdf6dcb"),
                            Numero = "05",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("82f0a7b0-5d36-4f93-b558-210012960ecf"),
                            Numero = "06",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("c316ae0e-2afc-44e2-8c16-86637a0e7bfc"),
                            Numero = "07",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("fe9ff411-2bf0-4424-9e3a-868732ad2140"),
                            Numero = "08",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("0ae6aa2e-064f-4b5e-bc1e-5468bfdcd5ed"),
                            Numero = "09",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("5edd16a3-3f19-4214-8986-a867fd76e5ff"),
                            Numero = "10",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("c169b985-cc94-4a56-81e7-25a57b74cdc2"),
                            Numero = "11",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("7413ed05-521c-497e-8eba-7d8c83c7bfb7"),
                            Numero = "12",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("9220a944-194d-4fab-a372-643bc01fb2a4"),
                            Numero = "13",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("e91a45d8-7224-48c3-a29b-84d46fdafb67"),
                            Numero = "14",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("d4cae3c4-2178-4f90-a2ac-623b3a322ebd"),
                            Numero = "15",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("8e668119-ef0f-46f7-bc1b-d428d30c1904"),
                            Numero = "16",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("9d8530bd-a89b-4a9b-9de4-d0576debd947"),
                            Numero = "17",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("1adb73e8-0a2d-403d-88cb-7f561e864f64"),
                            Numero = "18",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("9fb5adab-b100-49b3-8ab3-5b9d5656c21a"),
                            Numero = "19",
                            QuantidadeMax = 6
                        },
                        new
                        {
                            Id = new Guid("b6b1ef31-dd14-4f53-b114-bbc08a75f648"),
                            Numero = "20",
                            QuantidadeMax = 6
                        });
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.MovimentacaoEstoque", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemComandaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemNotaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantidade")
                        .HasColumnType("real");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TipoMovimentacao")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ItemComandaId");

                    b.HasIndex("ItemNotaId")
                        .IsUnique()
                        .HasFilter("[ItemNotaId] IS NOT NULL");

                    b.ToTable("MovimentacaoEstoque");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.NotaEntrada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FornecedorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("NotaEntrada");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Prato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Prato");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.PratoCardapio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardapioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PratoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Preco")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CardapioId");

                    b.HasIndex("PratoId", "CardapioId")
                        .IsUnique();

                    b.ToTable("PratoCardapio");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Receita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PratoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantidade")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("PratoId", "IngredienteId")
                        .IsUnique();

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ComandaMesa", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Comanda", "Comanda")
                        .WithOne("ComandaMesa")
                        .HasForeignKey("RestauranteSaborDoBrasil.Domain.Models.ComandaMesa", "ComandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Mesa", "Mesa")
                        .WithMany("Comandas")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comanda");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.HistoricoMesa", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Mesa", "Mesa")
                        .WithMany("Historico")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemComanda", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Comanda", "Comanda")
                        .WithMany("Itens")
                        .HasForeignKey("ComandaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Prato", "Prato")
                        .WithMany("Comandas")
                        .HasForeignKey("PratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comanda");

                    b.Navigation("Prato");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemNotaEntrada", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("ItemNotas")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.NotaEntrada", "NotaEntrada")
                        .WithMany("Itens")
                        .HasForeignKey("NotaEntradaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("NotaEntrada");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.MovimentacaoEstoque", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("Movimentacoes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.ItemComanda", "ItemComanda")
                        .WithMany("MovimentacoesEstoque")
                        .HasForeignKey("ItemComandaId");

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.ItemNotaEntrada", "ItemNotaEntrada")
                        .WithOne("MovimentacaoEstoque")
                        .HasForeignKey("RestauranteSaborDoBrasil.Domain.Models.MovimentacaoEstoque", "ItemNotaId");

                    b.Navigation("Ingrediente");

                    b.Navigation("ItemComanda");

                    b.Navigation("ItemNotaEntrada");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.NotaEntrada", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Fornecedor", "Fornecedor")
                        .WithMany("Notas")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.PratoCardapio", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Cardapio", "Cardapio")
                        .WithMany("Pratos")
                        .HasForeignKey("CardapioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Prato", "Prato")
                        .WithMany("Cardapios")
                        .HasForeignKey("PratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cardapio");

                    b.Navigation("Prato");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Receita", b =>
                {
                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Ingrediente", "Ingrediente")
                        .WithMany("Receitas")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestauranteSaborDoBrasil.Domain.Models.Prato", "Prato")
                        .WithMany("Receitas")
                        .HasForeignKey("PratoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Prato");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Cardapio", b =>
                {
                    b.Navigation("Pratos");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Comanda", b =>
                {
                    b.Navigation("ComandaMesa");

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Fornecedor", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Ingrediente", b =>
                {
                    b.Navigation("ItemNotas");

                    b.Navigation("Movimentacoes");

                    b.Navigation("Receitas");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemComanda", b =>
                {
                    b.Navigation("MovimentacoesEstoque");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.ItemNotaEntrada", b =>
                {
                    b.Navigation("MovimentacaoEstoque");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Mesa", b =>
                {
                    b.Navigation("Comandas");

                    b.Navigation("Historico");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.NotaEntrada", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("RestauranteSaborDoBrasil.Domain.Models.Prato", b =>
                {
                    b.Navigation("Cardapios");

                    b.Navigation("Comandas");

                    b.Navigation("Receitas");
                });
#pragma warning restore 612, 618
        }
    }
}
